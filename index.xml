<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xu</title><link>https://quietsugar.github.io/xu-stack-blog/</link><description>Recent content on Xu</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 10 Jun 2023 05:00:11 +0000</lastBuildDate><atom:link href="https://quietsugar.github.io/xu-stack-blog/index.xml" rel="self" type="application/rss+xml"/><item><title>春</title><link>https://quietsugar.github.io/xu-stack-blog/p/season/spring/</link><pubDate>Sat, 10 Jun 2023 05:00:11 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/season/spring/</guid><description>&lt;h1 id="春季">春季&lt;/h1>
&lt;p>​
春眠不觉晓，处处闻啼鸟。&lt;/p>
&lt;h3 id="二级标题1">二级标题1&lt;/h3>
&lt;blockquote>
&lt;p>二级标题1&lt;/p>
&lt;/blockquote>
&lt;h3 id="二级标题2">二级标题2&lt;/h3>
&lt;blockquote>
&lt;p>二级标题2&lt;/p>
&lt;/blockquote></description></item><item><title>冬</title><link>https://quietsugar.github.io/xu-stack-blog/p/season/winter/</link><pubDate>Sat, 10 Jun 2023 05:00:11 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/season/winter/</guid><description>&lt;h1 id="冬季">冬季&lt;/h1>
&lt;p>冬尽今宵促，年开明日长。&lt;/p></description></item><item><title>秋</title><link>https://quietsugar.github.io/xu-stack-blog/p/season/autumn/</link><pubDate>Sat, 10 Jun 2023 05:00:11 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/season/autumn/</guid><description>&lt;h1 id="秋季">秋季&lt;/h1>
&lt;p>秋风吹不尽，总是玉关情。&lt;/p></description></item><item><title>夏</title><link>https://quietsugar.github.io/xu-stack-blog/p/summer/</link><pubDate>Sat, 10 Jun 2023 05:00:11 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/summer/</guid><description>&lt;h1 id="夏季">夏季&lt;/h1>
&lt;p>夏早日初长，南风草木香。&lt;/p></description></item><item><title>示例页面</title><link>https://quietsugar.github.io/xu-stack-blog/p/about/</link><pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/about/</guid><description>&lt;img src="https://quietsugar.github.io/xu-stack-blog/p/about/cover.jpg" alt="Featured image of post 示例页面" />&lt;p>For more information about this theme, check the documentation: &lt;a class="link" href="https://docs.stack.jimmycai.com/" target="_blank" rel="noopener"
>https://docs.stack.jimmycai.com/&lt;/a>&lt;/p>
&lt;p>Want a site like this? Check out &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack-starter" target="_blank" rel="noopener"
>hugo-theme-stack-stater&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Photo by &lt;a class="link" href="https://unsplash.com/@pawel_czerwinski" target="_blank" rel="noopener"
>Pawel Czerwinski&lt;/a> on &lt;a class="link" href="https://unsplash.com/" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Archives</title><link>https://quietsugar.github.io/xu-stack-blog/archives/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/archives/</guid><description/></item><item><title>名侦探柯南</title><link>https://quietsugar.github.io/xu-stack-blog/p/example-page/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/p/example-page/</guid><description>&lt;img src="https://quietsugar.github.io/xu-stack-blog/p/example-page/conan.jpg" alt="Featured image of post 名侦探柯南" />&lt;h1 id="总述">总述&lt;/h1>
&lt;p>《名侦探柯南》是青山刚昌创作的漫画作品，于1994年在《周刊少年Sunday》1994年5号上开始连载 。单行本由小学馆出版 ，在中国大陆由长春出版社出版 ，在中国台湾由青文出版社出版，在中国香港由安乐文潮出版。电子版由《名侦探柯南》官方应用 、Sunday Webry发布；简体中文电子版由腾讯动漫 、波洞星球（已合并至腾讯动漫、哔哩哔哩漫画 、快看漫画发布 。作品亦有特别篇漫画 、电视动画片、动画电影等衍生作品，5次改编为真人电视剧 。&lt;/p>
&lt;h1 id="作品背景">作品背景&lt;/h1>
&lt;h2 id="创作背景">创作背景&lt;/h2>
&lt;p>《名侦探柯南》是小学馆为对抗《金田一少年事件簿》在侦探漫画领域里压倒性的优势而推出的。最初，青山刚昌打算创作一个拥有特殊能力，譬如触碰物体就能读取记忆的侦探。但编辑希望青山刚昌画正统推理漫画。刚刚拿到这个提案时，青山刚昌完全没有动力，但不久他就想起自己自小时候起就喜欢福尔摩斯那一类侦探的事情，于是开始着手创作。日本推理剧《古畑任三郎》也一定程度上刺激了作者的创作欲。
因为“名侦探柯南”这个名字会让人想到《未来少年柯南》，所以杂志主编说用“道尔”更好。但是青山觉得“柯南”比“道尔”的语感更好，所以坚持使用“名侦探柯南”这个名字。不过在连载前，发表预告时主编还将漫画名字错写成了“侦探少年柯南”。
连载之初，青山刚昌感觉作品的创作难度太高，曾产生放弃的念头，但这个想法被编辑部驳回。随后，青山刚昌决定到拉斯维加斯去度假。就在度假期间，青山刚昌接到了责任编辑的联络，得知《名侦探柯南》决定电影化。在这件事的推动下，连载得以继续进行。
青山刚昌想要画出来的侦探，是“不会杀死犯人，而是让犯人好好地被捕入狱去赎罪”的那一类人。他还向编辑部请求允许将柯南设定为不会哭泣的角色。除了原则上不会让犯人死掉、不会有共犯外，作者也会避免画违背伦理道德的事情，以及易于模仿的作案手法。为了从一些小知识中获取灵感，青山刚昌还会收看《令林老师惊讶的初耳学！》《秘密的县民SHOW》等杂学类节目。作品的结局设定在漫画第1卷内容创作结束时就已确定。青山刚昌的兄弟们的职业也给了青山刚昌源源不断的灵感。每当案情涉及机械和医疗时，青山刚昌便来咨询家中兄弟，让柯南的推理变得更加真实严谨。
青山刚昌是《机动战士高达》的粉丝，作品有多处“致敬高达”的细节，部分角色名是以电视动画片《机动战士高达》系列为原型的，其中以赤井秀一和安室透对夏亚和阿姆罗的致敬最为知名。此外与这两人有关的登场人物、道具也是处处在致敬。&lt;/p>
&lt;h2 id="作品沿革">作品沿革&lt;/h2>
&lt;p>1996年，《名侦探柯南》电视动画化。2003年，漫画单行本发行总量突破1亿册。
2006年1月13日刊发的朝日新闻晚报专访中，青山刚昌宣称“实际上，（黑衣组织的）头目的名字已经在某处出现了。”
2011年10月28日，青山刚昌在Club Sunday官方博客专访中声明黑衣组织头目不是阿笠博士。
2015年，《名侦探柯南》发行量突破1.48亿册。
2017年1月3日在鸟取举行的“能和青山刚昌老师谈话的一天”活动中，青山刚昌表示要撤回关于“《名侦探柯南》只会画到单行本第100卷”的说法，并且表示“肯定要超过不少”。同年单行本发行总量突破2亿册。
2017年4月1日起，作品在全日本的书店分发“名侦探平次”单行本封皮，其图标、封面、封底、折边等细节都以服部平次规格制作。
2017年12月13日，Sunday Webry发布了青山刚昌创作原稿过程的视频，原稿内容为揭晓黑衣组织“那位大人”的那一页。
2021年8月4日发行的《周刊少年Sunday》36·37合并号宣布启动《名侦探柯南》的“100卷企划”。同年8月16日，《名侦探柯南》100卷纪念网站开通。同年10月20日发行的《周刊少年Sunday》2021年47号附赠单行本第100卷的另一种书封，其上印有青山刚昌的亲笔留言。同年，全世界单行本累计发行量突破2.5亿册。
截至2023年1月，全世界单行本累计发行量（含预售）已达2.7亿册。&lt;/p>
&lt;h2 id="故事简介">故事简介&lt;/h2>
&lt;p>拥有世界级推理小说家父亲的高中生侦探——工藤新一。解决了许多疑难案件的他，某一天在和青梅竹马毛利兰约会的途中，目击了神秘黑衣男子的交易。为了将证人灭口，新一被灌下了毒药，虽然勉强保住了性命，却变成了小孩子的样子……若是让组织知道工藤新一还活着，连周围的人都会陷入危险。
他化名“江户川柯南”，继续解决疑难案件。这全部都是为了查明神秘组织的真面目，恢复作为工藤新一的自己……这个世界上不会有解不开的谜。无所不知的名侦探，真相永远只有一个。&lt;/p></description></item><item><title/><link>https://quietsugar.github.io/xu-stack-blog/multi-thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/multi-thread/</guid><description>&lt;h1 id="java多线程基础">&lt;code>java&lt;/code>多线程基础&lt;/h1>
&lt;h2 id="生命周期">生命周期&lt;/h2>
&lt;p>&lt;img src="https://quietsugar.github.io/xu-stack-blog/xu-stack-blog/multi-thread/index/multi-thread-life-cycle.png"
width="1621"
height="1632"
srcset="https://quietsugar.github.io/xu-stack-blog/xu-stack-blog/multi-thread/index/multi-thread-life-cycle_hu34e31e76abed8e5fe6137786e201bfa3_252348_480x0_resize_box_3.png 480w, https://quietsugar.github.io/xu-stack-blog/xu-stack-blog/multi-thread/index/multi-thread-life-cycle_hu34e31e76abed8e5fe6137786e201bfa3_252348_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="multi-thread-life-cycle"
class="gallery-image"
data-flex-grow="99"
data-flex-basis="238px"
>&lt;/p>
&lt;p>生命周期说明&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">① 新建状态:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 使用new关键字创建一个Thread或其子类对象后,该线程对象保持新建状态,直到start()方法被调用.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">② 就绪状态:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 当线程对象调用了start()方法后,线程进入就绪状态,此时等待CPU调度.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">③ 运行状态:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 如果就绪状态线程获取到CPU资源,就可以执行run()方法,此时处于运行状态.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">④ 阻塞状态:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 如果一个线程执行了sleep()方法后,失去占用的资源后,进入阻塞状态,如果睡眠时间已到或者获取到设备资源后,重新进入就绪状态,等待CPU调度.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 阻塞大致分为三种:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1) 等待阻塞:运行状态执行wait()方法,进入等待阻塞.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2) 同步阻塞:线程在获取synchronized同步锁失败(同 步锁被其他资源占用)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 3) 其他阻塞:调用sleep()或join()发出I/O请求时,线程进入阻塞状态,当sleep()状态超时,join()等待线程终止或超时,线程重新进入就绪状态.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">⑤ 死亡状态
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 一个运行状态的线程完成任务或者其他终止条件发生时,该线程切换到终止状态.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="线程的创建">线程的创建&lt;/h2>
&lt;ul>
&lt;li>方式1&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 通过继承Thread类,缺点:JAVA只支持单继承
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Thread1&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;创建方式一:继承Thread类,重写run方法...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>方式2&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 通过实现Runnable接口,不能获取返回值,无法抛出显示异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Thread2&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;创建方式二:实现Runnable接口,重写run方法...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>方式3&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 可以抛出异常,也可以获取返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Thread3&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Callable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="n">Integer&lt;/span> &lt;span class="nf">call&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;创建方式三:实现Callable接口,重写call方法...&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Links</title><link>https://quietsugar.github.io/xu-stack-blog/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/links/</guid><description>&lt;p>To use this feature, add &lt;code>links&lt;/code> section to frontmatter.&lt;/p>
&lt;p>This page&amp;rsquo;s frontmatter:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">links&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub is the world&amp;#39;s largest software development platform.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">title&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">description&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">website&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https://www.typescriptlang.org&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ts-logo-128.jpg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>image&lt;/code> field accepts both local and external images.&lt;/p></description></item><item><title>Search</title><link>https://quietsugar.github.io/xu-stack-blog/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quietsugar.github.io/xu-stack-blog/search/</guid><description/></item></channel></rss>